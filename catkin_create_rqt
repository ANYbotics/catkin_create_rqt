#!/usr/bin/env python

import argparse
import sys
import os
import stat

from string import Template

class CreateRqtPkg:
    def __init__(self, name, dependencies, path, class_name, namespace, file_name, author, email, is_python):

        self.pkg_name = name
        self.dependencies = dependencies
        if path is not None:
            self.path_root = os.path.abspath(path[0]) + '/'
        else:
            self.path_root = ''
        if class_name is not None:
            self.class_name = class_name[0]
        else:
            self.class_name = 'View'
        if namespace is not None:
            self.namespace = namespace[0]
        else:
            self.namespace = self.pkg_name
        if file_name is not None:
            self.file_name = file_name[0]
        else:
            self.file_name = self.pkg_name
        if author is not None:
            self.author = author[0]
        else:
            self.author = 'Author'
        if email is not None:
            self.email = email[0]
        else:
            self.email = 'bla@bla.com'
        self.is_python = is_python

        dependencies_1 = ""
        dependencies_2 = ""
        dependencies_xml = ""
        for item in self.dependencies:
            dependencies_1 += "  " + item + "\n"
            dependencies_2 += "    " + item + "\n"
            dependencies_xml += "  <depend>" + item + "</depend>\n"

        self.template_fill = {'class_name': self.class_name,
                              'namespace': self.namespace,
                              'file_name': self.file_name,
                              'author': self.author,
                              'email': self.email,
                              'dependencies_1': dependencies_1,
                              'dependencies_2': dependencies_2,
                              'dependencies_xml': dependencies_xml,
                              'pkg_name': self.pkg_name}

        self.path = self.path_root + self.pkg_name
        self.path_src = self.path + '/src/' + self.pkg_name
        self.path_include = self.path + '/include/' + self.pkg_name
        self.path_resource = self.path + '/resource'
        self.path_scripts = self.path + '/scripts'
        self.path_launch = self.path + '/launch'

        self.mkdir()
        self.create_build_files()
        self.create_code_files()

    def mkdir(self):
        if os.path.exists(self.path):
            print('package ' + self.pkg_name + ' exist already!')
            sys.exit(0)

        if not os.path.exists(self.path):
            os.makedirs(self.path)
        if not os.path.exists(self.path_src):
            os.makedirs(self.path_src)
        if not os.path.exists(self.path_include) and not self.is_python:
            os.makedirs(self.path_include)
        if not os.path.exists(self.path_resource) and not self.is_python:
            os.makedirs(self.path_resource)
        if not os.path.exists(self.path_scripts):
            os.makedirs(self.path_scripts)
        if not os.path.exists(self.path_launch):
            os.makedirs(self.path_launch)

    def create_build_files(self):
        # setup.py
        try:
            file_setup = open(self.path + "/setup.py", 'w')
        except (OSError, IOError):
            print('could not create setup.py')
            sys.exit(0)

        if not self.is_python:
            file_in = open('rqt_template/setup.py')
        else:
            file_in = open('rqt_template_py/setup.py')
        template = Template(file_in.read())
        file_setup.write(template.substitute(self.template_fill))
        file_setup.close()

        # plugin.xml
        try:
            file_plugin = open(self.path + "/plugin.xml", 'w')
        except (OSError, IOError):
            print('could not create plugin.xml')
            sys.exit(0)

        if not self.is_python:
            file_in = open('rqt_template/plugin.xml')
        else:
            file_in = open('rqt_template_py/plugin.xml')
        template = Template(file_in.read())
        file_plugin.write(template.substitute(self.template_fill))
        file_plugin.close()

        # package.xml
        try:
            file_package = open(self.path + "/package.xml", 'w')
        except (OSError, IOError):
            print('could not create package.xml')
            sys.exit(0)

        if not self.is_python:
            file_in = open('rqt_template/package.xml')
        else:
            file_in = open('rqt_template_py/package.xml')
        template = Template(file_in.read())
        file_package.write(template.substitute(self.template_fill))
        file_package.close()

        # CMakeLists.txt
        try:
            file_cmake = open(self.path + "/CMakeLists.txt", 'w')
        except (OSError, IOError):
            print('could not create CMakeLists.txt')
            sys.exit(0)

        if not self.is_python:
            file_in = open('rqt_template/CMakeLists.txt')
        else:
            file_in = open('rqt_template_py/CMakeLists.txt')
        template = Template(file_in.read())
        file_cmake.write(template.substitute(self.template_fill))
        file_cmake.close()

        # scripts
        try:
            file_scripts = open(self.path_scripts + '/' + self.pkg_name, 'w')
        except (OSError, IOError):
            print('could not create script ' + self.pkg_name + '')
            sys.exit(0)

        if not self.is_python:
            file_in = open('rqt_template/scripts/rqt_template')
        else:
            file_in = open('rqt_template_py/scripts/rqt_template_py')
        template = Template(file_in.read())
        file_scripts.write(template.substitute(self.template_fill))
        file_scripts.close()
        # make script executable
        st = os.stat(self.path_scripts + '/' + self.pkg_name)
        os.chmod(self.path_scripts + '/' + self.pkg_name, st.st_mode | stat.S_IEXEC)

        # launch
        try:
            file_launch = open(self.path_launch + '/' + self.pkg_name +
                               '.launch', 'w')
        except (OSError, IOError):
            print('could not create script ' + self.path_launch + '/' +
                  self.pkg_name + '.launch')
            sys.exit(0)

        if not self.is_python:
            file_in = open('rqt_template/launch/rqt_template.launch')
        else:
            file_in = open('rqt_template_py/launch/rqt_template_py.launch')
        template = Template(file_in.read())
        file_launch.write(template.substitute(self.template_fill))
        file_launch.close()

    def create_code_files(self):
        if not self.is_python:
            # cpp
            try:
                file_cpp = open(self.path_src + '/' + self.file_name + '.cpp', 'w')
            except (OSError, IOError):
                print('could not create ' + self.path_src + '/' + self.file_name + '.cpp')
                sys.exit(0)

            file_in = open('rqt_template/src/rqt_template/Template.cpp')
            template = Template(file_in.read())
            file_cpp.write(template.substitute(self.template_fill))
            file_cpp.close()

            # h
            try:
                file_h = open(self.path_include + '/' + self.file_name + '.h', 'w')
            except (OSError, IOError):
                print('could not create ' + self.path_include + '/' + self.file_name + '.h')
                sys.exit(0)

            file_in = open('rqt_template/include/rqt_template/Template.h')
            template = Template(file_in.read())
            file_h.write(template.substitute(self.template_fill))
            file_h.close()

        else:
            # py
            try:
                file_py = open(self.path_src + '/' + self.file_name + '.py', 'w')
            except (OSError, IOError):
                print('could not create ' + self.path_src + '/' + self.file_name + '.py')
                sys.exit(0)

            file_in = open('rqt_template_py/src/rqt_template_py/Template.py')
            template = Template(file_in.read())
            file_py.write(template.substitute(self.template_fill))
            file_py.close()

            # init py
            try:
                file_py = open(self.path_src + '/__init__.py', 'w')
            except (OSError, IOError):
                print('could not create ' + self.path_src + '/__init__.py')
                sys.exit(0)
            file_py.close()

        # ui
        try:
            if not self.is_python:
                file_ui = open(self.path_resource + '/' + self.file_name + '.ui', 'w')
            else:
                file_ui = open(self.path_src + '/' + self.class_name + '.ui', 'w')
        except (OSError, IOError):
            print('could not create ' + self.path_resource + '/' + self.file_name + '.ui')
            sys.exit(0)

        if not self.is_python:
            file_in = open('rqt_template/resource/Template.ui')
        else:
            file_in = open('rqt_template_py/src/rqt_template_py/Template.ui')
        template = Template(file_in.read())
        file_ui.write(template.substitute(self.template_fill))
        file_ui.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Creates a new catkin rqt plugin package',
        epilog='')
    parser.add_argument('name',
                        nargs=1,
                        help='The name for the package')
    parser.add_argument('dependencies',
                        nargs='*',
                        help='Catkin package Dependencies')
    parser.add_argument('-p', '--path',
                        action='append',
                        help='The path into which the package should be generated')
    parser.add_argument('-c', '--class_name',
                        action='append',
                        help='Give the base rqt_plugin class a custom name (default = View)')
    parser.add_argument('-n', '--namespace',
                        action='append',
                        help='Rename the namespace (default = package name)')
    parser.add_argument('-f', '--file_name',
                        action='append',
                        help='Rename the files .cpp/.h/.ui (default = package name)')
    parser.add_argument('-a', '--author',
                        action='append',
                        help='Author in package.xml')
    parser.add_argument('-e', '--email',
                        action='append',
                        help='Email address in package.xml')
    parser.add_argument('-y', '--python', dest='is_python',
                        default=False,
                        action='store_true',
                        help='Generate python rqt package')
    args = parser.parse_args()

    rqt = CreateRqtPkg(args.name[0], args.dependencies, args.path, args.class_name, args.namespace, args.file_name,
                       args.author, args.email, args.is_python)
